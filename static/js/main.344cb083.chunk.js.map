{"version":3,"sources":["reportWebVitals.js","index.js","App.js","components/Header.js","components/Numpad.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","useState","theNumber","setNumber","history","setHistory","actExpression","setExpression","placement","setPlacement","inputNum","num","console","log","operatorEval","varEval","eval","toFixed","err","length","removeNum","slice","clearScreen","previousHistory","prevHistIdx","nextHistory","nextHistIdx","className","setNum","Header","placeholder","value","onChange","e","target","id","onClick","Numpad","map"],"mappings":"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","file":"static/js/main.344cb083.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import { useState } from 'react';\nimport Header from './components/Header';\nimport Numpad from './components/Numpad';\n\n\nfunction App() {\n  const [theNumber, setNumber] = useState('');\n  const [history, setHistory] = useState([]);\n  const [actExpression, setExpression] = useState('');\n  const [placement, setPlacement] = useState(-1); \n  const inputNum = (num) => {\n    console.log(num);\n    if (num ==='+' || num ==='-' || num==='*'|| num==='/') {\n      setExpression(actExpression + num);\n      setNumber(num);\n    } else if (theNumber !== '' && actExpression === '') {\n      setExpression(num);\n      setNumber(num);\n    }\n    else {\n      setExpression(actExpression + num);\n      setNumber(theNumber + num);\n    }\n    }; //{} here, besides function blocks are pass properties (info) to other levels and components\n  \n  const operatorEval = () => {\n    let varEval; \n    try {\n      varEval = eval(actExpression).toFixed(2); \n      setHistory([...history, actExpression]);\n    } catch (err) {\n      varEval = \"\"; \n    } \n    setNumber(varEval);\n    setExpression('');\n    setPlacement(history.length + 1);\n  };\n  const removeNum = () => {\n    if (theNumber.length === 1) {\n      setPlacement(history.length);\n    }\n    setNumber(theNumber.slice(0, theNumber.length-1))\n    setExpression(actExpression.slice(0, actExpression.length-1))\n  }\n  const clearScreen = () => {\n    setNumber('');\n    setExpression('');\n    setPlacement(history.length);\n    \n  }\n\n  const previousHistory = () => {\n    \n    let prevHistIdx=placement;\n    if (placement > 0 ) {\n      prevHistIdx = placement -1;\n    }\n    setPlacement(prevHistIdx);\n    setNumber(history[prevHistIdx]); \n    setExpression(history[prevHistIdx]);\n    //finished this condition block[NEED TO CHECK IF WORKS OR NOT!!] also how am suppose to trigger the button without a function\n    \n    // else if (placement >= (history.length-1)){\n    //   console.log('it works')\n    // }//need to put this in the down arrow button function\n    \n    \n  }\n\n  const nextHistory = () => {\n    let nextHistIdx=placement;\n    if (placement < history.length -1) {\n      nextHistIdx = placement +1;\n    }\n    setPlacement(nextHistIdx);\n\n    setNumber(history[nextHistIdx]); \n    setExpression(history[nextHistIdx]);\n    \n    \n    \n  }\n\n  return (\n    <div className=\"container\">\n      <Header num={ theNumber } setNum={ setNumber } previousHistory={previousHistory} nextHistory={nextHistory}/>\n      <div className='subcontainer'>\n        <div>\n          <Numpad inputNum={inputNum} operatorEval={operatorEval} removeNum={removeNum} clearScreen={clearScreen}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","\nimport PropTypes from 'prop-types'\n\nconst Header = ({num, setNum, previousHistory, nextHistory}) => {\n    \n    return (\n        <header className = 'header'>\n            <input className = 'mainInput' placeholder = '0' \n            value = {num} onChange = {(e) => setNum(e.target.value)}/>  \n    \n            <div className='historyButtons'>\n                <button id='previous' onClick = {() => previousHistory()}>⬆</button>\n                <button id='next' onClick = {() => nextHistory()}>⬇</button>\n                {/* usestate needed for the buttons above index */}\n                {/* bonus: stop at start and end of the arrays with disabling button */}\n            </div>         \n        </header>\n    )\n}\n\n// Header.Header = {\n//     theNumber: 0\n// }\n\n\n// Header.propTypes = {\n//     theNumber: PropTypes.number.isRequired,\n// }\nexport default Header\n","function Numpad({inputNum, operatorEval, removeNum, clearScreen}) {\n\n    const numSet = ['7','8','9','/','4','5','6','*','1','2','3','-', '0','.','+'];\n    return (\n        <>\n\n                \n            <div className='firstLine'>\n                <button className=\"deleteButtons1\" onClick={() => removeNum()}>Del</button> {/*Ask: Why adding parameters on the lefthand side anything will give you a syntax error?*/}\n                <button className=\"deleteButtons2\" onClick={() => clearScreen()}>Clr</button> \n                <button className='equals' onClick={() => operatorEval()} >=</button>\n            </div>\n  \n            <div className='numpadContainer'>\n                {numSet.map((num) => {\n                    if (num === '+' || num === '-' || num == '*' || num=== '/') {\n                        return (<button className='operators' onClick={() => inputNum(num)} >{num}</button> )\n                    }\n                    else {\n                        return (<button className='numpad' onClick={() => inputNum(num)} >{num}</button> )\n                    } //js issues: anym function creates a wrapper for the inputNum\n                } //Again, the map here is passing onclick's function results before the event happens. On the technical level, Im not sure what happened. Why is this exactly doing that?\n                )}    \n            </div>   \n            \n            \n        </>\n        )\n}\n\nexport default Numpad;"],"sourceRoot":""}